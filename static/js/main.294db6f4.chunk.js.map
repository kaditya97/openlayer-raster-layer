{"version":3,"sources":["Map/MapContext.js","Map/Map.js","Layers/Layers.js","Layers/VectorLayer.js","Layers/TileLayer.js","Source/vector.js","Source/xyz.js","Source/osm.js","Controls/Controls.js","Controls/FullScreenControl.js","Features/Styles.js","App.js","serviceWorker.js","index.js"],"names":["MapContext","React","createContext","Map","children","zoom","center","mapRef","useRef","map","setMap","useState","useEffect","options","view","ol","layers","controls","overlays","mapObject","setTarget","current","undefined","getView","setZoom","setCenter","Provider","value","ref","className","Layers","VectorLayer","source","style","zIndex","useContext","vectorLayer","OLVectorLayer","addLayer","setZIndex","removeLayer","TileLayer","tileLayer","OLTileLayer","vector","features","VectorSource","xyz","osm","olSource","Controls","FullScreenControl","fullScreenControl","FullScreen","push","remove","Point","Style","image","CircleStyle","radius","fill","stroke","Stroke","color","Polygon","lineDash","width","Fill","MultiPolygon","geojsonObject","mapConfig","geojsonObject2","markersLonLat","kansasCityLonLat","blueSpringsLonLat","App","showLayer1","setShowLayer1","showLayer2","setShowLayer2","showMarker","setShowMarker","setFeatures","lonLatArray","iconStyle","Icon","anchorXUnits","anchorYUnits","src","markerImage32","item","feature","Feature","geometry","fromLonLat","setStyle","addMarkers","GeoJSON","readFeatures","featureProjection","get","FeatureStyles","type","checked","onChange","event","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mRAEeA,MADI,IAAIC,IAAMC,c,iBC+CdC,MA3CH,EAAGC,WAAUC,OAAMC,aAC9B,MAAMC,EAASC,oBACRC,EAAKC,GAAUC,mBAAS,MAgC/B,OA7BAC,oBAAU,KACT,IAAIC,EAAU,CACbC,KAAM,IAAIC,IAAQ,CAAEV,OAAMC,WAC1BU,OAAQ,GACRC,SAAU,GACVC,SAAU,IAGPC,EAAY,IAAIJ,IAAOF,GAI3B,OAHAM,EAAUC,UAAUb,EAAOc,SAC3BX,EAAOS,GAEA,IAAMA,EAAUC,eAAUE,IAC/B,IAGHV,oBAAU,KACJH,GAELA,EAAIc,UAAUC,QAAQnB,IACpB,CAACA,IAGJO,oBAAU,KACJH,GAELA,EAAIc,UAAUE,UAAUnB,IACtB,CAACA,IAGH,kBAAC,EAAWoB,SAAZ,CAAqBC,MAAO,CAAElB,QAC7B,yBAAKmB,IAAKrB,EAAQsB,UAAU,UAC1BzB,KCpCU0B,MAJA,EAAG1B,cACV,6BAAMA,G,QCyBC2B,MAxBK,EAAGC,SAAQC,QAAOC,SAAS,MAC9C,MAAM,IAAEzB,GAAQ0B,qBAAWnC,GAoB3B,OAlBAY,oBAAU,KACT,IAAKH,EAAK,OAEV,IAAI2B,EAAc,IAAIC,IAAc,CACnCL,SACAC,UAMD,OAHAxB,EAAI6B,SAASF,GACbA,EAAYG,UAAUL,GAEf,KACFzB,GACHA,EAAI+B,YAAYJ,KAGhB,CAAC3B,IAEG,M,QCGOgC,MAxBG,EAAGT,SAAQE,SAAS,MACrC,MAAM,IAAEzB,GAAQ0B,qBAAWnC,GAoB3B,OAlBAY,oBAAU,KACT,IAAKH,EAAK,OAEV,IAAIiC,EAAY,IAAIC,IAAY,CAC/BX,SACAE,WAMD,OAHAzB,EAAI6B,SAASI,GACbA,EAAUH,UAAUL,GAEb,KACFzB,GACHA,EAAI+B,YAAYE,KAGhB,CAACjC,IAEG,M,0CCjBOmC,MANf,UAAgB,SAAEC,IACjB,OAAO,IAAIC,IAAa,CACvBD,c,MCEaE,I,SCAAC,MAJf,WACC,OAAO,IAAIC,K,eCGGC,MAJE,EAAG9C,cACZ,6BAAMA,G,QCiBC+C,MAhBW,KACzB,MAAM,IAAE1C,GAAQ0B,qBAAWnC,GAY3B,OAVAY,oBAAU,KACT,IAAKH,EAAK,OAEV,IAAI2C,EAAoB,IAAIC,IAAW,IAIvC,OAFA5C,EAAIQ,SAASqC,KAAKF,GAEX,IAAM3C,EAAIQ,SAASsC,OAAOH,IAC/B,CAAC3C,IAEG,M,wBCfO,GACb+C,MAAO,IAAIC,IAAM,CACfC,MAAO,IAAIC,IAAY,CACrBC,OAAQ,GACRC,KAAM,KACNC,OAAQ,IAAIC,IAAO,CACjBC,MAAO,gBAIbC,QAAS,IAAIR,IAAM,CACjBK,OAAQ,IAAIC,IAAO,CACjBC,MAAO,OACPE,SAAU,CAAC,GACXC,MAAO,IAETN,KAAM,IAAIO,IAAK,CACbJ,MAAO,2BAGXK,aAAc,IAAIZ,IAAM,CACtBK,OAAQ,IAAIC,IAAO,CACjBC,MAAO,OACPG,MAAO,IAETN,KAAM,IAAIO,IAAK,CACbJ,MAAO,4B,eCbb,MAAMM,EAAgBC,EAAUD,cAC1BE,EAAiBD,EAAUC,eAC3BC,EAAgB,CAACF,EAAUG,iBAAkBH,EAAUI,mBA0F9CC,MAtEH,KACV,MAAOtE,EAAQmB,GAAad,mBAAS4D,EAAUjE,SACxCD,EAAMmB,GAAWb,mBAAS,IAE1BkE,EAAYC,GAAiBnE,oBAAS,IACtCoE,EAAYC,GAAiBrE,oBAAS,IACtCsE,EAAYC,GAAiBvE,oBAAS,IAEtCkC,EAAUsC,GAAexE,mBA1BlC,SAAoByE,GAClB,IAAIC,EAAY,IAAI5B,IAAM,CACxBC,MAAO,IAAI4B,IAAK,CACdC,aAAc,WACdC,aAAc,SACdC,IAAKlB,EAAUmB,kBAUnB,OAPeN,EAAY3E,IAAKkF,IAC9B,IAAIC,EAAU,IAAIC,IAAQ,CACxBC,SAAU,IAAItC,IAAMuC,YAAWJ,MAGjC,OADAC,EAAQI,SAASX,GACVO,IAagCK,CAAWxB,IAEpD,OACE,6BACE,kBAAC,EAAD,CAAKnE,OAAQyF,YAAWzF,GAASD,KAAMA,GACrC,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAW2B,OAAQgB,IAAOd,OAAQ,IACjC2C,GACC,kBAAC,EAAD,CACE7C,OAAQY,EAAO,CACbC,UAAU,IAAIqD,KAAUC,aAAa7B,EAAe,CAClD8B,kBAAmBC,YAAI,iBAG3BpE,MAAOqE,EAAcjC,eAGxBU,GACC,kBAAC,EAAD,CACE/C,OAAQY,EAAO,CACbC,UAAU,IAAIqD,KAAUC,aAAa3B,EAAgB,CACnD4B,kBAAmBC,YAAI,iBAG3BpE,MAAOqE,EAAcjC,eAGxBY,GAAc,kBAAC,EAAD,CAAajD,OAAQY,EAAO,CAAEC,gBAE/C,kBAAC,EAAD,KACE,kBAAC,EAAD,QAGJ,6BACE,2BACE0D,KAAK,WACLC,QAAS3B,EACT4B,SAAWC,GAAU5B,EAAc4B,EAAMC,OAAOH,WAC/C,IALL,kBAQA,6BACE,2BACED,KAAK,WACLC,QAASzB,EACT0B,SAAWC,GAAU1B,EAAc0B,EAAMC,OAAOH,WAC/C,IALL,oBAQA,6BACA,6BACE,2BACED,KAAK,WACLC,QAASvB,EACTwB,SAAWC,GAAUxB,EAAcwB,EAAMC,OAAOH,WAC/C,IALL,kBCnFcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,KAAKC,IACJA,EAAaC,eAEdC,MAAMC,IACLC,QAAQD,MAAMA,EAAME,Y","file":"static/js/main.294db6f4.chunk.js","sourcesContent":["import React from \"react\";\nconst MapContext = new React.createContext();\nexport default MapContext;\n","import React, { useRef, useState, useEffect } from \"react\"\nimport \"./Map.css\";\nimport MapContext from \"./MapContext\";\nimport * as ol from \"ol\";\n\nconst Map = ({ children, zoom, center }) => {\n\tconst mapRef = useRef();\n\tconst [map, setMap] = useState(null);\n\n\t// on component mount\n\tuseEffect(() => {\n\t\tlet options = {\n\t\t\tview: new ol.View({ zoom, center }),\n\t\t\tlayers: [],\n\t\t\tcontrols: [],\n\t\t\toverlays: []\n\t\t};\n\n\t\tlet mapObject = new ol.Map(options);\n\t\tmapObject.setTarget(mapRef.current);\n\t\tsetMap(mapObject);\n\n\t\treturn () => mapObject.setTarget(undefined);\n\t}, []);\n\n\t// zoom change handler\n\tuseEffect(() => {\n\t\tif (!map) return;\n\n\t\tmap.getView().setZoom(zoom);\n\t}, [zoom]);\n\n\t// center change handler\n\tuseEffect(() => {\n\t\tif (!map) return;\n\n\t\tmap.getView().setCenter(center)\n\t}, [center])\n\n\treturn (\n\t\t<MapContext.Provider value={{ map }}>\n\t\t\t<div ref={mapRef} className=\"ol-map\">\n\t\t\t\t{children}\n\t\t\t</div>\n\t\t</MapContext.Provider>\n\t)\n}\n\nexport default Map;","import React from \"react\";\n\nconst Layers = ({ children }) => {\n\treturn <div>{children}</div>;\n};\n\nexport default Layers;","import { useContext, useEffect } from \"react\";\nimport MapContext from \"../Map/MapContext\";\nimport OLVectorLayer from \"ol/layer/Vector\";\n\nconst VectorLayer = ({ source, style, zIndex = 0 }) => {\n\tconst { map } = useContext(MapContext);\n\n\tuseEffect(() => {\n\t\tif (!map) return;\n\n\t\tlet vectorLayer = new OLVectorLayer({\n\t\t\tsource,\n\t\t\tstyle\n\t\t});\n\n\t\tmap.addLayer(vectorLayer);\n\t\tvectorLayer.setZIndex(zIndex);\n\n\t\treturn () => {\n\t\t\tif (map) {\n\t\t\t\tmap.removeLayer(vectorLayer);\n\t\t\t}\n\t\t};\n\t}, [map]);\n\n\treturn null;\n};\n\nexport default VectorLayer;","import { useContext, useEffect } from \"react\";\nimport MapContext from \"../Map/MapContext\";\nimport OLTileLayer from \"ol/layer/Tile\";\n\nconst TileLayer = ({ source, zIndex = 0 }) => {\n\tconst { map } = useContext(MapContext);\n\n\tuseEffect(() => {\n\t\tif (!map) return;\n\n\t\tlet tileLayer = new OLTileLayer({\n\t\t\tsource,\n\t\t\tzIndex,\n\t\t});\n\n\t\tmap.addLayer(tileLayer);\n\t\ttileLayer.setZIndex(zIndex);\n\n\t\treturn () => {\n\t\t\tif (map) {\n\t\t\t\tmap.removeLayer(tileLayer);\n\t\t\t}\n\t\t};\n\t}, [map]);\n\n\treturn null;\n};\n\nexport default TileLayer;\n","import { Vector as VectorSource } from 'ol/source';\n\nfunction vector({ features }) {\n\treturn new VectorSource({\n\t\tfeatures\n\t});\n}\n\nexport default vector;\n","import * as olSource from \"ol/source\";\n\nfunction xyz({ url, attributions, maxZoom }) {\n\treturn new olSource.XYZ({ url, attributions, maxZoom });\n}\n\nexport default xyz;\n","import * as olSource from \"ol/source\";\n\nfunction osm() {\n\treturn new olSource.OSM();\n}\n\nexport default osm;","import React from \"react\";\n\nconst Controls = ({ children }) => {\n\treturn <div>{children}</div>;\n};\n\nexport default Controls;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { FullScreen } from \"ol/control\";\nimport MapContext from \"../Map/MapContext\";\n\nconst FullScreenControl = () => {\n\tconst { map } = useContext(MapContext);\n\n\tuseEffect(() => {\n\t\tif (!map) return;\n\n\t\tlet fullScreenControl = new FullScreen({});\n\n\t\tmap.controls.push(fullScreenControl);\n\n\t\treturn () => map.controls.remove(fullScreenControl);\n\t}, [map]);\n\n\treturn null;\n};\n\nexport default FullScreenControl;","import { Circle as CircleStyle, Fill, Stroke, Style } from \"ol/style\";\n\nexport default {\n  Point: new Style({\n    image: new CircleStyle({\n      radius: 10,\n      fill: null,\n      stroke: new Stroke({\n        color: \"magenta\",\n      }),\n    }),\n  }),\n  Polygon: new Style({\n    stroke: new Stroke({\n      color: \"blue\",\n      lineDash: [4],\n      width: 3,\n    }),\n    fill: new Fill({\n      color: \"rgba(0, 0, 255, 0.1)\",\n    }),\n  }),\n  MultiPolygon: new Style({\n    stroke: new Stroke({\n      color: \"blue\",\n      width: 1,\n    }),\n    fill: new Fill({\n      color: \"rgba(0, 0, 255, 0.1)\",\n    }),\n  }),\n};\n","import React, { useState } from \"react\";\nimport Map from \"./Map\";\nimport { Layers, TileLayer, VectorLayer } from \"./Layers\";\nimport { Style, Icon } from \"ol/style\";\nimport Feature from \"ol/Feature\";\nimport Point from \"ol/geom/Point\";\nimport { osm, vector } from \"./Source\";\nimport { fromLonLat, get } from \"ol/proj\";\nimport GeoJSON from \"ol/format/GeoJSON\";\nimport { Controls, FullScreenControl } from \"./Controls\";\nimport FeatureStyles from \"./Features/Styles\";\n\nimport mapConfig from \"./config.json\";\nimport \"./App.css\";\n\nconst geojsonObject = mapConfig.geojsonObject;\nconst geojsonObject2 = mapConfig.geojsonObject2;\nconst markersLonLat = [mapConfig.kansasCityLonLat, mapConfig.blueSpringsLonLat];\n\nfunction addMarkers(lonLatArray) {\n  var iconStyle = new Style({\n    image: new Icon({\n      anchorXUnits: \"fraction\",\n      anchorYUnits: \"pixels\",\n      src: mapConfig.markerImage32,\n    }),\n  });\n  let features = lonLatArray.map((item) => {\n    let feature = new Feature({\n      geometry: new Point(fromLonLat(item)),\n    });\n    feature.setStyle(iconStyle);\n    return feature;\n  });\n  return features;\n}\n\nconst App = () => {\n  const [center, setCenter] = useState(mapConfig.center);\n  const [zoom, setZoom] = useState(9);\n\n  const [showLayer1, setShowLayer1] = useState(true);\n  const [showLayer2, setShowLayer2] = useState(true);\n  const [showMarker, setShowMarker] = useState(false);\n\n  const [features, setFeatures] = useState(addMarkers(markersLonLat));\n\n  return (\n    <div>\n      <Map center={fromLonLat(center)} zoom={zoom}>\n        <Layers>\n          <TileLayer source={osm()} zIndex={0} />\n          {showLayer1 && (\n            <VectorLayer\n              source={vector({\n                features: new GeoJSON().readFeatures(geojsonObject, {\n                  featureProjection: get(\"EPSG:3857\"),\n                }),\n              })}\n              style={FeatureStyles.MultiPolygon}\n            />\n          )}\n          {showLayer2 && (\n            <VectorLayer\n              source={vector({\n                features: new GeoJSON().readFeatures(geojsonObject2, {\n                  featureProjection: get(\"EPSG:3857\"),\n                }),\n              })}\n              style={FeatureStyles.MultiPolygon}\n            />\n          )}\n          {showMarker && <VectorLayer source={vector({ features })} />}\n        </Layers>\n        <Controls>\n          <FullScreenControl />\n        </Controls>\n      </Map>\n      <div>\n        <input\n          type=\"checkbox\"\n          checked={showLayer1}\n          onChange={(event) => setShowLayer1(event.target.checked)}\n        />{\" \"}\n        Johnson County\n      </div>\n      <div>\n        <input\n          type=\"checkbox\"\n          checked={showLayer2}\n          onChange={(event) => setShowLayer2(event.target.checked)}\n        />{\" \"}\n        Wyandotte County\n      </div>\n      <hr />\n      <div>\n        <input\n          type=\"checkbox\"\n          checked={showMarker}\n          onChange={(event) => setShowMarker(event.target.checked)}\n        />{\" \"}\n        Show markers\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}